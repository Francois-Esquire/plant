!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).WebStreamsPolyfill={})}(this,function(e){"use strict";const t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;const r="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:void 0,o=Number.isNaN||function(e){return e!=e};function n(e){return"object"==typeof e&&null!==e||"function"==typeof e}function i(e){return e.slice()}function s(e){return!1!==function(e){if("number"!=typeof e)return!1;if(o(e))return!1;if(e<0)return!1;return!0}(e)&&e!==1/0}function a(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function l(e,t,r,o){const n=e[t];if(void 0!==n){if("function"!=typeof n)throw new TypeError(`${n} is not a method`);switch(r){case 0:return()=>u(n,e,o);case 1:return t=>{const r=[t].concat(o);return u(n,e,r)}}}return()=>Promise.resolve()}function c(e,t,r){const o=e[t];if(void 0!==o)return a(o,e,r)}function u(e,t,r){try{return Promise.resolve(a(e,t,r))}catch(e){return Promise.reject(e)}}function d(e){return e}function f(e){if(e=Number(e),o(e)||e<0)throw new RangeError("highWaterMark property of a queuing strategy must be non-negative and non-NaN");return e}function _(e){if(void 0===e)return()=>1;if("function"!=typeof e)throw new TypeError("size property of a queuing strategy must be a function");return t=>e(t)}function h(e,t,r){return Promise.prototype.then.call(e,t,r)}function b(e,t,r){let o,n;const i=new Promise((e,t)=>{o=e,n=t});void 0===r&&(r=(e=>{throw e}));return function(e,t,r){let o=!1;const n=e=>{!1===o&&(o=!0,r(e))};let i=0,s=0;const a=e.length,l=new Array(a);for(const r of e){const e=i;h(r,r=>{l[e]=r,++s===a&&t(l)},n),++i}}(e,e=>{try{const r=t(e);o(r)}catch(e){n(e)}},e=>{try{const t=r(e);o(t)}catch(e){n(e)}}),i}const m=function(){},y=16384;class SimpleQueue{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;t._elements.length===y-1&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let o=r+1;const n=e._elements,i=n[r];return o===y&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,i}forEach(e){let t=this._cursor,r=this._front,o=r._elements;for(;!(t===o.length&&void 0===r._next||t===o.length&&(t=0,0===(o=(r=r._next)._elements).length));)e(o[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}function p(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function w(e,t,r){if(!s(r=Number(r)))throw new RangeError("Size must be a finite, non-NaN, non-negative number.");e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function g(e){e._queue=new SimpleQueue,e._queueTotalSize=0}const S=t("[[AbortSteps]]"),v=t("[[ErrorSteps]]");class WritableStream{constructor(e={},t={}){P(this);const r=t.size;let o=t.highWaterMark;if(void 0!==e.type)throw new RangeError("Invalid type is specified");const n=_(r);void 0===o&&(o=1),function(e,t,r,o){const n=Object.create(WritableStreamDefaultController.prototype);const i=l(t,"write",1,[n]),s=l(t,"close",0,[]),a=l(t,"abort",1,[]);M(e,n,function(){return c(t,"start",[n])},i,s,a,r,o)}(this,e,o=f(o),n)}get locked(){if(!1===T(this))throw U("locked");return q(this)}abort(e){return!1===T(this)?Promise.reject(U("abort")):!0===q(this)?Promise.reject(new TypeError("Cannot abort a stream that already has a writer")):E(this,e)}getWriter(){if(!1===T(this))throw U("getWriter");return R(this)}}function R(e){return new WritableStreamDefaultWriter(e)}function P(e){e._state="writable",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new SimpleQueue,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}function T(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")}function q(e){return void 0!==e._writer}function E(e,t){const r=e._state;if("closed"===r||"errored"===r)return Promise.resolve(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let o=!1;"erroring"===r&&(o=!0,t=void 0);const n=new Promise((r,n)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:n,_reason:t,_wasAlreadyErroring:o}});return e._pendingAbortRequest._promise=n,!1===o&&C(e,t),n}function j(e,t){"writable"!==e._state?A(e):C(e,t)}function C(e,t){const r=e._writableStreamController;e._state="erroring",e._storedError=t;const o=e._writer;void 0!==o&&F(o,t),!1===function(e){if(void 0===e._inFlightWriteRequest&&void 0===e._inFlightCloseRequest)return!1;return!0}(e)&&!0===r._started&&A(e)}function A(e){e._state="errored",e._writableStreamController[v]();const t=e._storedError;if(e._writeRequests.forEach(e=>{e._reject(t)}),e._writeRequests=new SimpleQueue,void 0===e._pendingAbortRequest)return void O(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,!0===r._wasAlreadyErroring)return r._reject(t),void O(e);e._writableStreamController[S](r._reason).then(()=>{r._resolve(),O(e)},t=>{r._reject(t),O(e)})}function W(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function O(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&X(t,e._storedError)}function B(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(!0===t?function(e){ee(e)}(r):ne(r)),e._backpressure=t}class WritableStreamDefaultWriter{constructor(e){if(!1===T(e))throw new TypeError("WritableStreamDefaultWriter can only be constructed with a WritableStream instance");if(!0===q(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;const t=e._state;if("writable"===t)!1===W(e)&&!0===e._backpressure?ee(this):re(this),J(this);else if("erroring"===t)te(this,e._storedError),J(this);else if("closed"===t)re(this),J(r=this),Z(r);else{const t=e._storedError;te(this,t),K(this,t)}var r}get closed(){return!1===k(this)?Promise.reject(V("closed")):this._closedPromise}get desiredSize(){if(!1===k(this))throw V("desiredSize");if(void 0===this._ownerWritableStream)throw G("desiredSize");return function(e){const t=e._ownerWritableStream,r=t._state;if("errored"===r||"erroring"===r)return null;if("closed"===r)return 0;return x(t._writableStreamController)}(this)}get ready(){return!1===k(this)?Promise.reject(V("ready")):this._readyPromise}abort(e){return!1===k(this)?Promise.reject(V("abort")):void 0===this._ownerWritableStream?Promise.reject(G("abort")):function(e,t){return E(e._ownerWritableStream,t)}(this,e)}close(){if(!1===k(this))return Promise.reject(V("close"));const e=this._ownerWritableStream;return void 0===e?Promise.reject(G("close")):!0===W(e)?Promise.reject(new TypeError("cannot close an already-closing stream")):z(this)}releaseLock(){if(!1===k(this))throw V("releaseLock");void 0!==this._ownerWritableStream&&L(this)}write(e){return!1===k(this)?Promise.reject(V("write")):void 0===this._ownerWritableStream?Promise.reject(G("write to")):D(this,e)}}function k(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")}function z(e){const t=e._ownerWritableStream,r=t._state;if("closed"===r||"errored"===r)return Promise.reject(new TypeError(`The stream (in ${r} state) is not in the writable state and cannot be closed`));const o=new Promise((e,r)=>{const o={_resolve:e,_reject:r};t._closeRequest=o});var n;return!0===t._backpressure&&"writable"===r&&ne(e),w(n=t._writableStreamController,"close",0),Y(n),o}function I(e,t){"pending"===e._closedPromiseState?X(e,t):function(e,t){K(e,t)}(e,t)}function F(e,t){"pending"===e._readyPromiseState?oe(e,t):function(e,t){te(e,t)}(e,t)}function L(e){const t=e._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");F(e,r),I(e,r),t._writer=void 0,e._ownerWritableStream=void 0}function D(e,t){const r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return $(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return Promise.reject(G("write to"));const i=r._state;if("errored"===i)return Promise.reject(r._storedError);if(!0===W(r)||"closed"===i)return Promise.reject(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return Promise.reject(r._storedError);const s=function(e){return new Promise((t,r)=>{const o={_resolve:t,_reject:r};e._writeRequests.push(o)})}(r);return function(e,t,r){const o={chunk:t};try{w(e,o,r)}catch(t){return void $(e,t)}const n=e._controlledWritableStream;if(!1===W(n)&&"writable"===n._state){const t=N(e);B(n,t)}Y(e)}(o,t,n),s}class WritableStreamDefaultController{constructor(){throw new TypeError("WritableStreamDefaultController cannot be constructed explicitly")}error(e){if(!1===function(e){if(!n(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,"_controlledWritableStream"))return!1;return!0}(this))throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");"writable"===this._controlledWritableStream._state&&H(this,e)}[S](e){const t=this._abortAlgorithm(e);return Q(this),t}[v](){g(this)}}function M(e,t,r,o,n,i,s,a){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,g(t),t._started=!1,t._strategySizeAlgorithm=a,t._strategyHWM=s,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=i;const l=N(t);B(e,l);const c=r();Promise.resolve(c).then(()=>{t._started=!0,Y(t)},r=>{t._started=!0,j(e,r)}).catch(m)}function Q(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function x(e){return e._strategyHWM-e._queueTotalSize}function Y(e){const t=e._controlledWritableStream;if(!1===e._started)return;if(void 0!==t._inFlightWriteRequest)return;if("erroring"===t._state)return void A(t);if(0===e._queue.length)return;const r=e._queue.peek().value;"close"===r?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),p(e);const r=e._closeAlgorithm();Q(e),r.then(()=>{!function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";const t=e._writer;void 0!==t&&Z(t)}(t)},e=>{!function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),j(e,t)}(t,e)}).catch(m)}(e):function(e,t){const r=e._controlledWritableStream;(function(e){e._inFlightWriteRequest=e._writeRequests.shift()})(r),e._writeAlgorithm(t).then(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(p(e),!1===W(r)&&"writable"===t){const t=N(e);B(r,t)}Y(e)},t=>{"writable"===r._state&&Q(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,j(e,t)}(r,t)}).catch(m)}(e,r.chunk)}function $(e,t){"writable"===e._controlledWritableStream._state&&H(e,t)}function N(e){return x(e)<=0}function H(e,t){const r=e._controlledWritableStream;Q(e),C(r,t)}function U(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function V(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function G(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function J(e){e._closedPromise=new Promise((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"})}function K(e,t){J(e),X(e,t)}function X(e,t){e._closedPromise.catch(()=>{}),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected"}function Z(e){e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved"}function ee(e){e._readyPromise=new Promise((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r}),e._readyPromiseState="pending"}function te(e,t){ee(e),oe(e,t)}function re(e){ee(e),ne(e)}function oe(e,t){e._readyPromise.catch(()=>{}),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected"}function ne(e){e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled"}const ie=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e};let se;"symbol"==typeof t.asyncIterator&&(se={[t.asyncIterator](){return this}},Object.defineProperty(se,t.asyncIterator,{enumerable:!1}));const ae=t("[[CancelSteps]]"),le=t("[[PullSteps]]");class ReadableStream{constructor(e={},t={}){fe(this);const r=t.size;let o=t.highWaterMark;const n=e.type;if("bytes"===String(n)){if(void 0!==r)throw new RangeError("The strategy for a byte stream cannot have a size function");void 0===o&&(o=0),function(e,t,r){const o=Object.create(ReadableByteStreamController.prototype);const n=l(t,"pull",0,[o]),i=l(t,"cancel",1,[]);let s=t.autoAllocateChunkSize;if(void 0!==s&&(s=Number(s),!1===ie(s)||s<=0))throw new RangeError("autoAllocateChunkSize must be a positive integer");!function(e,t,r,o,n,i,s){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=void 0,t._queue=t._queueTotalSize=void 0,g(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=f(i),t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=s,t._pendingPullIntos=new SimpleQueue,e._readableStreamController=t;const a=r();Promise.resolve(a).then(()=>{t._started=!0,He(t)},e=>{nt(t,e)}).catch(m)}(e,o,function(){return c(t,"start",[o])},n,i,r,s)}(this,e,o=f(o))}else{if(void 0!==n)throw new RangeError("Invalid type is specified");{const t=_(r);void 0===o&&(o=1),function(e,t,r,o){const n=Object.create(ReadableStreamDefaultController.prototype);const i=l(t,"pull",0,[n]),s=l(t,"cancel",1,[]);Ye(e,n,function(){return c(t,"start",[n])},i,s,r,o)}(this,e,o=f(o),t)}}}get locked(){if(!1===_e(this))throw at("locked");return he(this)}cancel(e){return!1===_e(this)?Promise.reject(at("cancel")):!0===he(this)?Promise.reject(new TypeError("Cannot cancel a stream that already has a reader")):we(this,e)}getReader({mode:e}={}){if(!1===_e(this))throw at("getReader");if(void 0===e)return ue(this,!0);if("byob"===(e=String(e)))return function(e,t=!1){const r=new ReadableStreamBYOBReader(e);return r._forAuthorCode=t,r}(this,!0);throw new RangeError("Invalid mode is specified")}pipeThrough({writable:e,readable:t},{preventClose:r,preventAbort:o,preventCancel:n,signal:i}={}){if(!1===_e(this))throw at("pipeThrough");if(!1===T(e))throw new TypeError("writable argument to pipeThrough must be a WritableStream");if(!1===_e(t))throw new TypeError("readable argument to pipeThrough must be a ReadableStream");if(r=Boolean(r),o=Boolean(o),n=Boolean(n),void 0!==i&&!st(i))throw new TypeError("ReadableStream.prototype.pipeThrough's signal option must be an AbortSignal");if(!0===he(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(!0===q(e))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return me(this,e,r,o,n,i).catch(()=>{}),t}pipeTo(e,{preventClose:t,preventAbort:r,preventCancel:o,signal:n}={}){return!1===_e(this)?Promise.reject(at("pipeTo")):!1===T(e)?Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream")):(t=Boolean(t),r=Boolean(r),o=Boolean(o),void 0===n||st(n)?!0===he(this)?Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):!0===q(e)?Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):me(this,e,t,r,o,n):Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's signal option must be an AbortSignal")))}tee(){if(!1===_e(this))throw at("tee");const e=function(e,t){const r=ue(e);let o,n,s,a,l,c=!1,u=!1,d=!1;const f=new Promise(e=>{l=e});function _(){if(!0===c)return Promise.resolve();c=!0;const e=Be(r).then(e=>{c=!1;const t=e.done;if(!0===t)return!1===u&&Le(s._readableStreamController),void(!1===d&&Le(a._readableStreamController));const r=e.value,o=r,n=r;!1===u&&De(s._readableStreamController,o),!1===d&&De(a._readableStreamController,n)});return e.catch(m),Promise.resolve()}function h(){}return s=de(h,_,function(t){if(u=!0,o=t,!0===d){const t=i([o,n]),r=we(e,t);l(r)}return f}),a=de(h,_,function(t){if(d=!0,n=t,!0===u){const t=i([o,n]),r=we(e,t);l(r)}return f}),r._closedPromise.catch(e=>{Me(s._readableStreamController,e),Me(a._readableStreamController,e)}),[s,a]}(this);return i(e)}getIterator({preventCancel:e}={}){if(!1===_e(this))throw at("getIterator");const t=ue(this),r=Object.create(ce);return r._asyncIteratorReader=t,r._preventCancel=Boolean(e),r}}const ce={next(){if(!1===be(this))return Promise.reject(lt("next"));const e=this._asyncIteratorReader;return void 0===e._ownerReadableStream?Promise.reject(ct("iterate")):Be(e).then(t=>{const r=t.done;return r&&Oe(e),Se(t.value,r,!0)})},return(e){if(!1===be(this))return Promise.reject(lt("next"));const t=this._asyncIteratorReader;if(void 0===t._ownerReadableStream)return Promise.reject(ct("finish iterating"));if(t._readRequests.length>0)return Promise.reject(new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled"));if(!1===this._preventCancel){const r=We(t,e);return Oe(t),r.then(()=>Se(e,!0,!0))}return Oe(t),Promise.resolve(Se(e,!0,!0))}};function ue(e,t=!1){const r=new ReadableStreamDefaultReader(e);return r._forAuthorCode=t,r}function de(e,t,r,o=1,n=(()=>1)){const i=Object.create(ReadableStream.prototype);return fe(i),Ye(i,Object.create(ReadableStreamDefaultController.prototype),e,t,r,o,n),i}function fe(e){e._state="readable",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}function _e(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")}function he(e){return void 0!==e._reader}function be(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorReader")}function me(e,t,r,o,n,i){const s=ue(e),a=R(t);let l=!1,c=Promise.resolve();return new Promise((u,d)=>{let f;if(void 0!==i){if(f=(()=>{const r=new DOMException("Aborted","AbortError"),i=[];!1===o&&i.push(()=>"writable"===t._state?E(t,r):Promise.resolve()),!1===n&&i.push(()=>"readable"===e._state?we(e,r):Promise.resolve()),y(()=>b(i.map(e=>e()),e=>e),!0,r)}),!0===i.aborted)return void f();i.addEventListener("abort",f)}if(h(e,s._closedPromise,e=>{!1===o?y(()=>E(t,e),!0,e):p(!0,e)}),h(t,a._closedPromise,t=>{!1===n?y(()=>we(e,t),!0,t):p(!0,t)}),function(e,t,r){"closed"===e._state?r():t.then(r).catch(m)}(e,s._closedPromise,()=>{!1===r?y(()=>(function(e){const t=e._ownerWritableStream,r=t._state;return!0===W(t)||"closed"===r?Promise.resolve():"errored"===r?Promise.reject(t._storedError):z(e)})(a)):p()}),!0===W(t)||"closed"===t._state){const t=new TypeError("the destination writable stream closed before all data could be piped to it");!1===n?y(()=>we(e,t),!0,t):p(!0,t)}function _(){const e=c;return c.then(()=>e!==c?_():void 0)}function h(e,t,r){"errored"===e._state?r(e._storedError):t.catch(r).catch(m)}function y(e,r,o){function n(){e().then(()=>w(r,o),e=>w(!0,e)).catch(m)}!0!==l&&(l=!0,"writable"===t._state&&!1===W(t)?_().then(n):n())}function p(e,r){!0!==l&&(l=!0,"writable"===t._state&&!1===W(t)?_().then(()=>w(e,r)).catch(m):w(e,r))}function w(e,t){L(a),Oe(s),void 0!==i&&i.removeEventListener("abort",f),e?d(t):u(void 0)}new Promise((e,t)=>{!function r(o){o?e():(!0===l?Promise.resolve(!0):a._readyPromise.then(()=>Be(s).then(({value:e,done:t})=>!0===t||(c=D(a,e).catch(()=>{}),!1)))).then(r,t)}(!1)}).catch(m)})}function ye(e){return new Promise((t,r)=>{const o={_resolve:t,_reject:r};e._reader._readIntoRequests.push(o)})}function pe(e){return new Promise((t,r)=>{const o={_resolve:t,_reject:r};e._reader._readRequests.push(o)})}function we(e,t){if(e._disturbed=!0,"closed"===e._state)return Promise.resolve(void 0);if("errored"===e._state)return Promise.reject(e._storedError);return ge(e),e._readableStreamController[ae](t).then(()=>void 0)}function ge(e){e._state="closed";const t=e._reader;void 0!==t&&(Ce(t)&&(t._readRequests.forEach(e=>{e._resolve(Se(void 0,!0,t._forAuthorCode))}),t._readRequests=new SimpleQueue),ht(t))}function Se(e,t,r){let o=null;!0===r&&(o=Object.prototype);const n=Object.create(o);return n.value=e,n.done=t,n}function ve(e,t){e._state="errored",e._storedError=t;const r=e._reader;void 0!==r&&(Ce(r)?(r._readRequests.forEach(e=>{e._reject(t)}),r._readRequests=new SimpleQueue):(r._readIntoRequests.forEach(e=>{e._reject(t)}),r._readIntoRequests=new SimpleQueue),_t(r,t))}function Re(e,t,r){const o=e._reader;o._readRequests.shift()._resolve(Se(t,r,o._forAuthorCode))}function Pe(e){return e._reader._readIntoRequests.length}function Te(e){return e._reader._readRequests.length}function qe(e){const t=e._reader;return void 0!==t&&!!je(t)}function Ee(e){const t=e._reader;return void 0!==t&&!!Ce(t)}void 0!==se&&Object.setPrototypeOf(ce,se),Object.defineProperty(ce,"next",{enumerable:!1}),Object.defineProperty(ce,"return",{enumerable:!1}),"symbol"==typeof t.asyncIterator&&Object.defineProperty(ReadableStream.prototype,t.asyncIterator,{value:ReadableStream.prototype.getIterator,enumerable:!1,writable:!0,configurable:!0});class ReadableStreamDefaultReader{constructor(e){if(!1===_e(e))throw new TypeError("ReadableStreamDefaultReader can only be constructed with a ReadableStream instance");if(!0===he(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");Ae(this,e),this._readRequests=new SimpleQueue}get closed(){return Ce(this)?this._closedPromise:Promise.reject(ut("closed"))}cancel(e){return Ce(this)?void 0===this._ownerReadableStream?Promise.reject(ct("cancel")):We(this,e):Promise.reject(ut("cancel"))}read(){return Ce(this)?void 0===this._ownerReadableStream?Promise.reject(ct("read from")):Be(this):Promise.reject(ut("read"))}releaseLock(){if(!Ce(this))throw ut("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");Oe(this)}}}class ReadableStreamBYOBReader{constructor(e){if(!_e(e))throw new TypeError("ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a byte source");if(!1===$e(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");if(he(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");Ae(this,e),this._readIntoRequests=new SimpleQueue}get closed(){return je(this)?this._closedPromise:Promise.reject(bt("closed"))}cancel(e){return je(this)?void 0===this._ownerReadableStream?Promise.reject(ct("cancel")):We(this,e):Promise.reject(bt("cancel"))}read(e){return je(this)?void 0===this._ownerReadableStream?Promise.reject(ct("read from")):ArrayBuffer.isView(e)?(e.buffer,0===e.byteLength?Promise.reject(new TypeError("view must have non-zero byteLength")):function(e,t){const r=e._ownerReadableStream;if(r._disturbed=!0,"errored"===r._state)return Promise.reject(r._storedError);return function(e,t){const r=e._controlledReadableByteStream;let o=1;t.constructor!==DataView&&(o=t.constructor.BYTES_PER_ELEMENT);const n=t.constructor,i={buffer:d(t.buffer),byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:o,ctor:n,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(i),ye(r);if("closed"===r._state){const e=new n(i.buffer,i.byteOffset,0);return Promise.resolve(Se(e,!0,r._reader._forAuthorCode))}if(e._queueTotalSize>0){if(!0===Je(e,i)){const t=Ve(i);return Xe(e),Promise.resolve(Se(t,!1,r._reader._forAuthorCode))}if(!0===e._closeRequested){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");return nt(e,t),Promise.reject(t)}}e._pendingPullIntos.push(i);const s=ye(r);return He(e),s}(r._readableStreamController,t)}(this,e)):Promise.reject(new TypeError("view must be an array buffer view")):Promise.reject(bt("read"))}releaseLock(){if(!je(this))throw bt("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");Oe(this)}}}function je(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")}function Ce(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")}function Ae(e,t){e._forAuthorCode=!0,e._ownerReadableStream=t,t._reader=e,"readable"===t._state?dt(e):"closed"===t._state?function(e){dt(e),ht(e)}(e):ft(e,t._storedError)}function We(e,t){return we(e._ownerReadableStream,t)}function Oe(e){"readable"===e._ownerReadableStream._state?_t(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){ft(e,t)}(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function Be(e){const t=e._ownerReadableStream;return t._disturbed=!0,"closed"===t._state?Promise.resolve(Se(void 0,!0,e._forAuthorCode)):"errored"===t._state?Promise.reject(t._storedError):t._readableStreamController[le]()}class ReadableStreamDefaultController{constructor(){throw new TypeError}get desiredSize(){if(!1===ke(this))throw mt("desiredSize");return Qe(this)}close(){if(!1===ke(this))throw mt("close");if(!1===xe(this))throw new TypeError("The stream is not in a state that permits close");Le(this)}enqueue(e){if(!1===ke(this))throw mt("enqueue");if(!1===xe(this))throw new TypeError("The stream is not in a state that permits enqueue");return De(this,e)}error(e){if(!1===ke(this))throw mt("error");Me(this,e)}[ae](e){g(this);const t=this._cancelAlgorithm(e);return Fe(this),t}[le](){const e=this._controlledReadableStream;if(this._queue.length>0){const t=p(this);return!0===this._closeRequested&&0===this._queue.length?(Fe(this),ge(e)):ze(this),Promise.resolve(Se(t,!1,e._reader._forAuthorCode))}const t=pe(e);return ze(this),t}}function ke(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")}function ze(e){!1!==Ie(e)&&(!0!==e._pulling?(e._pulling=!0,e._pullAlgorithm().then(()=>{e._pulling=!1,!0===e._pullAgain&&(e._pullAgain=!1,ze(e))},t=>{Me(e,t)}).catch(m)):e._pullAgain=!0)}function Ie(e){const t=e._controlledReadableStream;return!1!==xe(e)&&(!1!==e._started&&(!0===he(t)&&Te(t)>0||Qe(e)>0))}function Fe(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function Le(e){const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(Fe(e),ge(t))}function De(e,t){const r=e._controlledReadableStream;if(!0===he(r)&&Te(r)>0)Re(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw Me(e,t),t}try{w(e,t,r)}catch(t){throw Me(e,t),t}}ze(e)}function Me(e,t){const r=e._controlledReadableStream;"readable"===r._state&&(g(e),Fe(e),ve(r,t))}function Qe(e){const t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function xe(e){const t=e._controlledReadableStream._state;return!1===e._closeRequested&&"readable"===t}function Ye(e,t,r,o,n,i,s){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,g(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=s,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t;const a=r();Promise.resolve(a).then(()=>{t._started=!0,ze(t)},e=>{Me(t,e)}).catch(m)}class ReadableStreamBYOBRequest{constructor(){throw new TypeError("ReadableStreamBYOBRequest cannot be used directly")}get view(){if(!1===Ne(this))throw yt("view");return this._view}respond(e){if(!1===Ne(this))throw yt("respond");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,function(e,t){if(!1===s(t=Number(t)))throw new RangeError("bytesWritten must be a finite");tt(e,t)}(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!1===Ne(this))throw yt("respond");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");if(!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");e.buffer,function(e,t){const r=e._pendingPullIntos.peek();if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.byteLength!==t.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");r.buffer=t.buffer,tt(e,t.byteLength)}(this._associatedReadableByteStreamController,e)}}class ReadableByteStreamController{constructor(){throw new TypeError("ReadableByteStreamController constructor cannot be used directly")}get byobRequest(){if(!1===$e(this))throw pt("byobRequest");if(void 0===this._byobRequest&&this._pendingPullIntos.length>0){const e=this._pendingPullIntos.peek(),t=new Uint8Array(e.buffer,e.byteOffset+e.bytesFilled,e.byteLength-e.bytesFilled),r=Object.create(ReadableStreamBYOBRequest.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(r,this,t),this._byobRequest=r}return this._byobRequest}get desiredSize(){if(!1===$e(this))throw pt("desiredSize");return it(this)}close(){if(!1===$e(this))throw pt("close");if(!0===this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");const e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);!function(e){const t=e._controlledReadableByteStream;if(e._queueTotalSize>0)return void(e._closeRequested=!0);if(e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek();if(t.bytesFilled>0){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");throw nt(e,t),t}}ot(e),ge(t)}(this)}enqueue(e){if(!1===$e(this))throw pt("enqueue");if(!0===this._closeRequested)throw new TypeError("stream is closed or draining");const t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);if(!ArrayBuffer.isView(e))throw new TypeError("You can only enqueue array buffer views when using a ReadableByteStreamController");e.buffer,function(e,t){const r=e._controlledReadableByteStream,o=t.buffer,n=t.byteOffset,i=t.byteLength,s=d(o);if(!0===Ee(r))if(0===Te(r))Ge(e,s,n,i);else{const e=new Uint8Array(s,n,i);Re(r,e,!1)}else!0===qe(r)?(Ge(e,s,n,i),et(e)):Ge(e,s,n,i);He(e)}(this,e)}error(e){if(!1===$e(this))throw pt("error");nt(this,e)}[ae](e){if(this._pendingPullIntos.length>0){this._pendingPullIntos.peek().bytesFilled=0}g(this);const t=this._cancelAlgorithm(e);return ot(this),t}[le](){const e=this._controlledReadableByteStream;if(this._queueTotalSize>0){const t=this._queue.shift();let r;this._queueTotalSize-=t.byteLength,Xe(this);try{r=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}catch(e){return Promise.reject(e)}return Promise.resolve(Se(r,!1,e._reader._forAuthorCode))}const t=this._autoAllocateChunkSize;if(void 0!==t){let e;try{e=new ArrayBuffer(t)}catch(e){return Promise.reject(e)}const r={buffer:e,byteOffset:0,byteLength:t,bytesFilled:0,elementSize:1,ctor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(r)}const r=pe(e);return He(this),r}}function $e(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")}function Ne(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")}function He(e){!1!==function(e){const t=e._controlledReadableByteStream;if("readable"!==t._state)return!1;if(!0===e._closeRequested)return!1;if(!1===e._started)return!1;if(!0===Ee(t)&&Te(t)>0)return!0;if(!0===qe(t)&&Pe(t)>0)return!0;if(it(e)>0)return!0;return!1}(e)&&(!0!==e._pulling?(e._pulling=!0,e._pullAlgorithm().then(()=>{e._pulling=!1,!0===e._pullAgain&&(e._pullAgain=!1,He(e))},t=>{nt(e,t)}).catch(m)):e._pullAgain=!0)}function Ue(e,t){let r=!1;"closed"===e._state&&(r=!0);const o=Ve(t);"default"===t.readerType?Re(e,o,r):function(e,t,r){const o=e._reader;o._readIntoRequests.shift()._resolve(Se(t,r,o._forAuthorCode))}(e,o,r)}function Ve(e){const t=e.bytesFilled,r=e.elementSize;return new e.ctor(e.buffer,e.byteOffset,t/r)}function Ge(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function Je(e,t){const r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+n,s=i-i%r;let a=n,l=!1;s>o&&(a=s-t.bytesFilled,l=!0);const c=e._queue;for(;a>0;){const r=c.peek(),o=Math.min(a,r.byteLength),n=t.byteOffset+t.bytesFilled;u=t.buffer,d=n,f=r.buffer,_=r.byteOffset,h=o,new Uint8Array(u).set(new Uint8Array(f,_,h),d),r.byteLength===o?c.shift():(r.byteOffset+=o,r.byteLength-=o),e._queueTotalSize-=o,Ke(e,o,t),a-=o}var u,d,f,_,h;return l}function Ke(e,t,r){Ze(e),r.bytesFilled+=t}function Xe(e){0===e._queueTotalSize&&!0===e._closeRequested?(ot(e),ge(e._controlledReadableByteStream)):He(e)}function Ze(e){void 0!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=void 0,e._byobRequest=void 0)}function et(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();!0===Je(e,t)&&(rt(e),Ue(e._controlledReadableByteStream,t))}}function tt(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");!function(e,t){t.buffer=d(t.buffer);const r=e._controlledReadableByteStream;if(!0===qe(r))for(;Pe(r)>0;)Ue(r,rt(e))}(e,r)}else!function(e,t,r){if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range");if(Ke(e,t,r),r.bytesFilled<r.elementSize)return;rt(e);const o=r.bytesFilled%r.elementSize;if(o>0){const t=r.byteOffset+r.bytesFilled,n=r.buffer.slice(t-o,t);Ge(e,n,0,n.byteLength)}r.buffer=d(r.buffer),r.bytesFilled-=o,Ue(e._controlledReadableByteStream,r),et(e)}(e,t,r);He(e)}function rt(e){const t=e._pendingPullIntos.shift();return Ze(e),t}function ot(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function nt(e,t){const r=e._controlledReadableByteStream;"readable"===r._state&&(!function(e){Ze(e),e._pendingPullIntos=new SimpleQueue}(e),g(e),ot(e),ve(r,t))}function it(e){const t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function st(e){if("object"!=typeof e||null===e)return!1;const t=Object.getOwnPropertyDescriptor(AbortSignal.prototype,"aborted").get;try{return t.call(e),!0}catch(e){return!1}}function at(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function lt(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}function ct(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function ut(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}function dt(e){e._closedPromise=new Promise((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r})}function ft(e,t){dt(e),_t(e,t)}function _t(e,t){e._closedPromise.catch(()=>{}),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0}function ht(e){e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0}function bt(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function mt(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function yt(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function pt(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}class ByteLengthQueuingStrategy{constructor({highWaterMark:e}){this.highWaterMark=e}size(e){return e.byteLength}}class CountQueuingStrategy{constructor({highWaterMark:e}){this.highWaterMark=e}size(){return 1}}class TransformStream{constructor(e={},t={},r={}){const o=t.size;let n=t.highWaterMark;const i=r.size;let s=r.highWaterMark;if(void 0!==e.writableType)throw new RangeError("Invalid writable type specified");const a=_(o);if(void 0===n&&(n=1),n=f(n),void 0!==e.readableType)throw new RangeError("Invalid readable type specified");const d=_(i);let h;void 0===s&&(s=0),s=f(s),function(e,t,r,o,n,i){function s(){return t}e._writable=function(e,t,r,o,n=1,i=(()=>1)){const s=Object.create(WritableStream.prototype);return P(s),M(s,Object.create(WritableStreamDefaultController.prototype),e,t,r,o,n,i),s}(s,function(t){return function(e,t){const r=e._transformStreamController;if(!0===e._backpressure){const o=e._backpressureChangePromise;return o.then(()=>{const o=e._writable,n=o._state;if("erroring"===n)throw o._storedError;return qt(r,t)})}return qt(r,t)}(e,t)},function(){return function(e){const t=e._readable,r=e._transformStreamController,o=r._flushAlgorithm();return Pt(r),o.then(()=>{if("errored"===t._state)throw t._storedError;const e=t._readableStreamController;!0===xe(e)&&Le(e)}).catch(r=>{throw gt(e,r),t._storedError})}(e)},function(t){return function(e,t){return gt(e,t),Promise.resolve()}(e,t)},r,o),e._readable=de(s,function(){return function(e){return vt(e,!1),e._backpressureChangePromise}(e)},function(t){return St(e,t),Promise.resolve()},n,i),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,vt(e,!0),e._transformStreamController=void 0}(this,new Promise(e=>{h=e}),n,a,s,d),function(e,t){const r=Object.create(TransformStreamDefaultController.prototype);let o=e=>{try{return Tt(r,e),Promise.resolve()}catch(e){return Promise.reject(e)}};const n=t.transform;if(void 0!==n){if("function"!=typeof n)throw new TypeError("transform is not a method");o=(e=>u(n,t,[e,r]))}const i=l(t,"flush",0,[r]);!function(e,t,r,o){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=o}(e,r,o,i)}(this,e);const b=c(e,"start",[this._transformStreamController]);h(b)}get readable(){if(!1===wt(this))throw jt("readable");return this._readable}get writable(){if(!1===wt(this))throw jt("writable");return this._writable}}function wt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")}function gt(e,t){Me(e._readable._readableStreamController,t),St(e,t)}function St(e,t){Pt(e._transformStreamController),$(e._writable._writableStreamController,t),!0===e._backpressure&&vt(e,!1)}function vt(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=new Promise(t=>{e._backpressureChangePromise_resolve=t}),e._backpressure=t}class TransformStreamDefaultController{constructor(){throw new TypeError("TransformStreamDefaultController instances cannot be created directly")}get desiredSize(){if(!1===Rt(this))throw Et("desiredSize");return Qe(this._controlledTransformStream._readable._readableStreamController)}enqueue(e){if(!1===Rt(this))throw Et("enqueue");Tt(this,e)}error(e){if(!1===Rt(this))throw Et("error");var t;t=e,gt(this._controlledTransformStream,t)}terminate(){if(!1===Rt(this))throw Et("terminate");!function(e){const t=e._controlledTransformStream,r=t._readable._readableStreamController;!0===xe(r)&&Le(r);const o=new TypeError("TransformStream terminated");St(t,o)}(this)}}function Rt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")}function Pt(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function Tt(e,t){const r=e._controlledTransformStream,o=r._readable._readableStreamController;if(!1===xe(o))throw new TypeError("Readable side is not in a state that permits enqueue");try{De(o,t)}catch(e){throw St(r,e),r._readable._storedError}(function(e){return!0!==Ie(e)})(o)!==r._backpressure&&vt(r,!0)}function qt(e,t){return e._transformAlgorithm(t).catch(t=>{throw gt(e._controlledTransformStream,t),t})}function Et(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function jt(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}const Ct=Object.assign||function(e,...t){const r=Object(e);for(const e of t)for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r};void 0!==r&&Ct(r,{ReadableStream:ReadableStream,WritableStream:WritableStream,ByteLengthQueuingStrategy:ByteLengthQueuingStrategy,CountQueuingStrategy:CountQueuingStrategy,TransformStream:TransformStream}),e.ReadableStream=ReadableStream,e.WritableStream=WritableStream,e.ByteLengthQueuingStrategy=ByteLengthQueuingStrategy,e.CountQueuingStrategy=CountQueuingStrategy,e.TransformStream=TransformStream,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=polyfill.es6.min.js.map
